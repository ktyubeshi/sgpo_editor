---
description: Debug
globs: *.py
alwaysApply: false
---

## 問題が解決しない場合のアプローチ：

1. **処理の流れを追跡する**：
   - 各関数の開始・終了時にログを出力
   - 重要な変数の値を記録
   - 条件分岐の結果を記録

2. **クラス名とメソッド名を含める**：
   - `"TableManager.update_table: 開始"`のように、どのクラスのどのメソッドからのログかを明示
   - 複数のクラスが連携する場合に特に重要

3. **階層構造を意識する**：
   - 呼び出し階層がわかるようにログを設計
   - シグナル発行と受信の対応関係を追跡

4. **重要なフラグや状態変数を記録**：
   - `_force_filter_update`のような重要なフラグの状態変化を記録
   - キャッシュの使用状況を記録

5. **例外処理を強化**：
   - すべての例外をキャッチしてログに記録
   - スタックトレースも含めると原因特定が容易になる

このようなデバッグログを活用することで、以下のような問題解決が可能になります：

- シグナル連鎖の追跡（どのシグナルがどのスロットを呼び出しているか）
- データフローの追跡（データがどのように変換・更新されているか）
- キャッシュの動作確認（キャッシュが適切に更新・クリアされているか）
- UI更新の確認（テーブルの内容が実際に更新されているか）

